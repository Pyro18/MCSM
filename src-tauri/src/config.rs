use std::path::PathBuf;
use serde::{Serialize, Deserialize};
use tokio::fs;
use std::collections::HashMap;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServerProperties {
    pub server_name: String,
    pub gamemode: String,
    pub difficulty: String,
    pub max_players: i32,
    pub view_distance: i32,
    pub spawn_protection: i32,
    pub online_mode: bool,
    pub pvp: bool,
    pub allow_flight: bool,
    pub motd: String,
    pub enable_command_block: bool,
    pub spawn_animals: bool,
    pub spawn_monsters: bool,
    pub spawn_npcs: bool,
    pub generate_structures: bool,
    pub level_name: String,
    pub level_seed: String,
    pub level_type: String,
    pub hardcore: bool,
    pub enable_rcon: bool,
    pub rcon_password: String,
    pub rcon_port: i32,
    pub enable_query: bool,
    pub query_port: i32,
    pub enable_jmx_monitoring: bool,
    pub jmx_port: i32,
    pub sync_chunk_writes: bool,
    pub enable_status: bool,
    pub entity_broadcast_range_percentage: i32,
    pub text_filtering_config: String,
    pub simulation_distance: i32,
    pub player_idle_timeout: i32,
    pub force_gamemode: bool,
    pub rate_limit: i32,
    pub hard_max_players: i32,
    pub max_tick_time: i64,
    pub enforce_whitelist: bool,
    pub use_native_transport: bool,
    pub enable_jmx_monitoring: bool,
    pub enable_spawn_chunks: bool,
    pub enable_command_block: bool,
    pub function_permission_level: i32,
    pub max_world_size: i32,
    pub network_compression_threshold: i32,
    pub resource_pack: String,
    pub resource_pack_sha1: String,
    pub require_resource_pack: bool,
    pub server_ip: String,
    pub server_port: i32,
    pub spawn_npcs: bool,
    pub spawn_animals: bool,
    pub spawn_monsters: bool,
    pub snooper_enabled: bool,
    pub use_native_transport: bool,
    pub white_list: bool,
    pub enforce_whitelist: bool,
}

impl ServerProperties {
    pub fn new() -> Self {
        ServerProperties {
            server_name: "Minecraft Server".to_string(),
            gamemode: "survival".to_string(),
            difficulty: "normal".to_string(),
            max_players: 20,
            view_distance: 10,
            spawn_protection: 16,
            online_mode: true,
            pvp: true,
            allow_flight: false,
            motd: "A Minecraft Server".to_string(),
            enable_command_block: false,
            spawn_animals: true,
            spawn_monsters: true,
            spawn_npcs: true,
            generate_structures: true,
            level_name: "world".to_string(),
            level_seed: "".to_string(),
            level_type: "default".to_string(),
            hardcore: false,
            enable_rcon: false,
            rcon_password: "".to_string(),
            rcon_port: 25575,
            enable_query: false,
            query_port: 25565,
            enable_jmx_monitoring: false,
            jmx_port: 7091,
            sync_chunk_writes: true,
            enable_status: true,
            entity_broadcast_range_percentage: 100,
            text_filtering_config: "".to_string(),
            simulation_distance: 10,
            player_idle_timeout: 0,
            force_gamemode: false,
            rate_limit: 0,
            hard_max_players: 20,
            max_tick_time: 60000,
            enforce_whitelist: false,
            use_native_transport: true,
            enable_spawn_chunks: true,
            function_permission_level: 2,
            max_world_size: 29999984,
            network_compression_threshold: 256,
            resource_pack: "".to_string(),
            resource_pack_sha1: "".to_string(),
            require_resource_pack: false,
            server_ip: "".to_string(),
            server_port: 25565,
            snooper_enabled: true,
            white_list: false,
        }
    }

    pub async fn load_from_file(&mut self, path: &PathBuf) -> Result<(), String> {
        if !path.exists() {
            return Err("Server properties file not found".to_string());
        }

        let content = fs::read_to_string(path)
            .await
            .map_err(|e| e.to_string())?;

        for line in content.lines() {
            if line.starts_with('#') || line.trim().is_empty() {
                continue;
            }

            if let Some((key, value)) = line.split_once('=') {
                self.set_property(key.trim(), value.trim())?;
            }
        }

        Ok(())
    }

    pub async fn save_to_file(&self, path: &PathBuf) -> Result<(), String> {
        let mut content = String::new();
        content.push_str("#Minecraft server properties\n");
        content.push_str("#Generated by MCSM\n\n");

        let properties = self.to_properties_map();
        for (key, value) in properties {
            content.push_str(&format!("{}={}\n", key, value));
        }

        fs::write(path, content)
            .await
            .map_err(|e| e.to_string())?;

        Ok(())
    }

    fn set_property(&mut self, key: &str, value: &str) -> Result<(), String> {
        match key {
            "server-name" => self.server_name = value.to_string(),
            "gamemode" => self.gamemode = value.to_string(),
            "difficulty" => self.difficulty = value.to_string(),
            "max-players" => self.max_players = value.parse().map_err(|_| "Invalid max-players value")?,
            "view-distance" => self.view_distance = value.parse().map_err(|_| "Invalid view-distance value")?,
            "spawn-protection" => self.spawn_protection = value.parse().map_err(|_| "Invalid spawn-protection value")?,
            "online-mode" => self.online_mode = value.parse().map_err(|_| "Invalid online-mode value")?,
            "pvp" => self.pvp = value.parse().map_err(|_| "Invalid pvp value")?,
            "allow-flight" => self.allow_flight = value.parse().map_err(|_| "Invalid allow-flight value")?,
            "motd" => self.motd = value.to_string(),
            "enable-command-block" => self.enable_command_block = value.parse().map_err(|_| "Invalid enable-command-block value")?,
            "spawn-animals" => self.spawn_animals = value.parse().map_err(|_| "Invalid spawn-animals value")?,
            "spawn-monsters" => self.spawn_monsters = value.parse().map_err(|_| "Invalid spawn-monsters value")?,
            "spawn-npcs" => self.spawn_npcs = value.parse().map_err(|_| "Invalid spawn-npcs value")?,
            "generate-structures" => self.generate_structures = value.parse().map_err(|_| "Invalid generate-structures value")?,
            "level-name" => self.level_name = value.to_string(),
            "level-seed" => self.level_seed = value.to_string(),
            "level-type" => self.level_type = value.to_string(),
            "hardcore" => self.hardcore = value.parse().map_err(|_| "Invalid hardcore value")?,
            "enable-rcon" => self.enable_rcon = value.parse().map_err(|_| "Invalid enable-rcon value")?,
            "rcon-password" => self.rcon_password = value.to_string(),
            "rcon-port" => self.rcon_port = value.parse().map_err(|_| "Invalid rcon-port value")?,
            "enable-query" => self.enable_query = value.parse().map_err(|_| "Invalid enable-query value")?,
            "query-port" => self.query_port = value.parse().map_err(|_| "Invalid query-port value")?,
            "enable-jmx-monitoring" => self.enable_jmx_monitoring = value.parse().map_err(|_| "Invalid enable-jmx-monitoring value")?,
            "jmx-port" => self.jmx_port = value.parse().map_err(|_| "Invalid jmx-port value")?,
            "sync-chunk-writes" => self.sync_chunk_writes = value.parse().map_err(|_| "Invalid sync-chunk-writes value")?,
            "enable-status" => self.enable_status = value.parse().map_err(|_| "Invalid enable-status value")?,
            "entity-broadcast-range-percentage" => self.entity_broadcast_range_percentage = value.parse().map_err(|_| "Invalid entity-broadcast-range-percentage value")?,
            "text-filtering-config" => self.text_filtering_config = value.to_string(),
            "simulation-distance" => self.simulation_distance = value.parse().map_err(|_| "Invalid simulation-distance value")?,
            "player-idle-timeout" => self.player_idle_timeout = value.parse().map_err(|_| "Invalid player-idle-timeout value")?,
            "force-gamemode" => self.force_gamemode = value.parse().map_err(|_| "Invalid force-gamemode value")?,
            "rate-limit" => self.rate_limit = value.parse().map_err(|_| "Invalid rate-limit value")?,
            "hard-max-players" => self.hard_max_players = value.parse().map_err(|_| "Invalid hard-max-players value")?,
            "max-tick-time" => self.max_tick_time = value.parse().map_err(|_| "Invalid max-tick-time value")?,
            "enforce-whitelist" => self.enforce_whitelist = value.parse().map_err(|_| "Invalid enforce-whitelist value")?,
            "use-native-transport" => self.use_native_transport = value.parse().map_err(|_| "Invalid use-native-transport value")?,
            "enable-spawn-chunks" => self.enable_spawn_chunks = value.parse().map_err(|_| "Invalid enable-spawn-chunks value")?,
            "function-permission-level" => self.function_permission_level = value.parse().map_err(|_| "Invalid function-permission-level value")?,
            "max-world-size" => self.max_world_size = value.parse().map_err(|_| "Invalid max-world-size value")?,
            "network-compression-threshold" => self.network_compression_threshold = value.parse().map_err(|_| "Invalid network-compression-threshold value")?,
            "resource-pack" => self.resource_pack = value.to_string(),
            "resource-pack-sha1" => self.resource_pack_sha1 = value.to_string(),
            "require-resource-pack" => self.require_resource_pack = value.parse().map_err(|_| "Invalid require-resource-pack value")?,
            "server-ip" => self.server_ip = value.to_string(),
            "server-port" => self.server_port = value.parse().map_err(|_| "Invalid server-port value")?,
            "snooper-enabled" => self.snooper_enabled = value.parse().map_err(|_| "Invalid snooper-enabled value")?,
            "white-list" => self.white_list = value.parse().map_err(|_| "Invalid white-list value")?,
            _ => return Err(format!("Unknown property: {}", key)),
        }
        Ok(())
    }

    fn to_properties_map(&self) -> HashMap<String, String> {
        let mut map = HashMap::new();
        map.insert("server-name".to_string(), self.server_name.clone());
        map.insert("gamemode".to_string(), self.gamemode.clone());
        map.insert("difficulty".to_string(), self.difficulty.clone());
        map.insert("max-players".to_string(), self.max_players.to_string());
        map.insert("view-distance".to_string(), self.view_distance.to_string());
        map.insert("spawn-protection".to_string(), self.spawn_protection.to_string());
        map.insert("online-mode".to_string(), self.online_mode.to_string());
        map.insert("pvp".to_string(), self.pvp.to_string());
        map.insert("allow-flight".to_string(), self.allow_flight.to_string());
        map.insert("motd".to_string(), self.motd.clone());
        map.insert("enable-command-block".to_string(), self.enable_command_block.to_string());
        map.insert("spawn-animals".to_string(), self.spawn_animals.to_string());
        map.insert("spawn-monsters".to_string(), self.spawn_monsters.to_string());
        map.insert("spawn-npcs".to_string(), self.spawn_npcs.to_string());
        map.insert("generate-structures".to_string(), self.generate_structures.to_string());
        map.insert("level-name".to_string(), self.level_name.clone());
        map.insert("level-seed".to_string(), self.level_seed.clone());
        map.insert("level-type".to_string(), self.level_type.clone());
        map.insert("hardcore".to_string(), self.hardcore.to_string());
        map.insert("enable-rcon".to_string(), self.enable_rcon.to_string());
        map.insert("rcon-password".to_string(), self.rcon_password.clone());
        map.insert("rcon-port".to_string(), self.rcon_port.to_string());
        map.insert("enable-query".to_string(), self.enable_query.to_string());
        map.insert("query-port".to_string(), self.query_port.to_string());
        map.insert("enable-jmx-monitoring".to_string(), self.enable_jmx_monitoring.to_string());
        map.insert("jmx-port".to_string(), self.jmx_port.to_string());
        map.insert("sync-chunk-writes".to_string(), self.sync_chunk_writes.to_string());
        map.insert("enable-status".to_string(), self.enable_status.to_string());
        map.insert("entity-broadcast-range-percentage".to_string(), self.entity_broadcast_range_percentage.to_string());
        map.insert("text-filtering-config".to_string(), self.text_filtering_config.clone());
        map.insert("simulation-distance".to_string(), self.simulation_distance.to_string());
        map.insert("player-idle-timeout".to_string(), self.player_idle_timeout.to_string());
        map.insert("force-gamemode".to_string(), self.force_gamemode.to_string());
        map.insert("rate-limit".to_string(), self.rate_limit.to_string());
        map.insert("hard-max-players".to_string(), self.hard_max_players.to_string());
        map.insert("max-tick-time".to_string(), self.max_tick_time.to_string());
        map.insert("enforce-whitelist".to_string(), self.enforce_whitelist.to_string());
        map.insert("use-native-transport".to_string(), self.use_native_transport.to_string());
        map.insert("enable-spawn-chunks".to_string(), self.enable_spawn_chunks.to_string());
        map.insert("function-permission-level".to_string(), self.function_permission_level.to_string());
        map.insert("max-world-size".to_string(), self.max_world_size.to_string());
        map.insert("network-compression-threshold".to_string(), self.network_compression_threshold.to_string());
        map.insert("resource-pack".to_string(), self.resource_pack.clone());
        map.insert("resource-pack-sha1".to_string(), self.resource_pack_sha1.clone());
        map.insert("require-resource-pack".to_string(), self.require_resource_pack.to_string());
        map.insert("server-ip".to_string(), self.server_ip.clone());
        map.insert("server-port".to_string(), self.server_port.to_string());
        map.insert("snooper-enabled".to_string(), self.snooper_enabled.to_string());
        map.insert("white-list".to_string(), self.white_list.to_string());
        map
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_server_properties() {
        let mut props = ServerProperties::new();
        assert_eq!(props.max_players, 20);
        assert_eq!(props.gamemode, "survival");
        
        props.set_property("max-players", "50").unwrap();
        assert_eq!(props.max_players, 50);
        
        props.set_property("gamemode", "creative").unwrap();
        assert_eq!(props.gamemode, "creative");
    }
} 